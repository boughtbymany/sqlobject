# Install SQLObject on windows and test against MS SQL server and postgres
# Heavily inspired by Oliver Grisel's appveyor-demo (https://github.com/ogrisel/python-appveyor-demo)
# and Michael Sverdlik's appveyor-utils (https://github.com/cloudify-cosmo/appveyor-utils)
version: '{branch}-{build}'

image: Visual Studio 2019

cache:
  - '%LOCALAPPDATA%\pip\Cache'

# Match travis
clone_depth: 50

services:
  - mysql
  - postgresql

environment:
  MYSQL_PWD: "Password12!"
  PGUSER: "postgres"
  PGPASSWORD: "Password12!"

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\run_with_env.cmd"

  matrix:
    - TESTS: "py27-mysql"
      PYTHON_ARCH: "32"
      PYTHON_VERSION: "2.7"
      PYTHON_HOME: "C:\\Python27"
      db: mysql
    - TESTS: "py36-mysql"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.6"
      PYTHON_HOME: "C:\\Python36-x64"
      db: mysql
    - TESTS: "py37-mysql"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.7"
      PYTHON_HOME: "C:\\Python37-x64"
      db: mysql
    - TESTS: "py38-mysql"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.8"
      PYTHON_HOME: "C:\\Python38-x64"
      db: mysql
    - TESTS: "py39-mysql"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.9"
      PYTHON_HOME: "C:\\Python39-x64"
      db: mysql
    - TESTS: "py36-mariadb"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.6"
      PYTHON_HOME: "C:\\Python36-x64"
      db: mysql
    - TESTS: "py37-mariadb"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.7"
      PYTHON_HOME: "C:\\Python37-x64"
      db: mysql
    - TESTS: "py38-mariadb"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.8"
      PYTHON_HOME: "C:\\Python38-x64"
      db: mysql
    - TESTS: "py39-mariadb"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.9"
      PYTHON_HOME: "C:\\Python39-x64"
      db: mysql
    - TESTS: "py27-postgres"
      PYTHON_ARCH: "32"
      PYTHON_VERSION: "2.7"
      PYTHON_HOME: "C:\\Python27"
      db: postgresql
    - TESTS: "py36-postgres"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.6"
      PYTHON_HOME: "C:\\Python36-x64"
      db: postgresql
    - TESTS: "py37-postgres"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.7"
      PYTHON_HOME: "C:\\Python37-x64"
      db: postgresql
    - TESTS: "py38-postgres"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.8"
      PYTHON_HOME: "C:\\Python38-x64"
      db: postgresql
    - TESTS: "py39-postgres"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.9"
      PYTHON_HOME: "C:\\Python39-x64"
      db: postgresql
    - TESTS: "py27-sqlite"
      PYTHON_ARCH: "32"
      PYTHON_VERSION: "2.7"
      PYTHON_HOME: "C:\\Python27"
    - TESTS: "py36-sqlite"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.6"
      PYTHON_HOME: "C:\\Python36-x64"
    - TESTS: "py37-sqlite"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.7"
      PYTHON_HOME: "C:\\Python37-x64"
    - TESTS: "py38-sqlite"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.8"
      PYTHON_HOME: "C:\\Python38-x64"
    - TESTS: "py39-sqlite"
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.9"
      PYTHON_HOME: "C:\\Python39-x64"

install:
  # Ensure we use the right python version
  - "SET PATH=%PYTHON_HOME%;%PYTHON_HOME%\\Scripts;C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin;C:\\Program Files\\PostgreSQL\\9.6\\bin;%PATH%"
  - "SET TOXPYTHON=%PYTHON_HOME%\\python.exe"
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "python -m pip install --upgrade \"pip<21\" \"setuptools<44\""
  - "pip install --upgrade tox ppu"
  - "pip --version"
  # List ODBC drivers
  - ps: Get-OdbcDriver -Platform 32-bit | Select-Object -ExpandProperty Name
  - ps: Get-OdbcDriver -Platform 64-bit | Select-Object -ExpandProperty Name

# Not a C project, so no build step
build: false

test_script:
  - "%CMD_IN_ENV% devscripts\\tox-select-envs %TESTS%"

after_test:
  - "remove-old-files.py -o 180 %LOCALAPPDATA%\\pip\\Cache"
